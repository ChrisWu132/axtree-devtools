---
alwaysApply: true
---
<!-- NOTE: This document is maintained in **English**. -->

# AXTree Tool – Implementation Roadmap

> This roadmap targets first landing contributors. Read `01_Product.mdc` and `02_Structure.mdc` first. All commands assume pnpm at repo root after `pnpm install`.

---
## Phase 0 — Repository bootstrap

| Step | Goal | Action | Artifact |
|------|------|--------|----------|
| 0-1 | Init monorepo | base TS config | root package.json / tsconfig.base.json |
| 0-2 | ESLint & Prettier | add lint + format tooling | `.eslintrc.cjs` `.prettierrc` `lint-staged.config.js`|
| 0-3 | Vitest | add unit test runner | `vitest.config.ts` |
| 0-4 | GitHub CI | create CI workflow (install → lint → test) | ci.yml |

### 0.x Reference configs

#### Example package.json (`@ax/cli`)
```jsonc
{
  "name": "@ax/cli",
  "version": "0.1.0",
  "description": "Headless AXTree CLI",
  "bin": { "axtree": "dist/cli.js" },
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": ["dist"],
  "scripts": {
    "build": "tsc -p tsconfig.pkg.json",
    "test": "vitest",
    "lint": "eslint src --ext .ts",
    "prepublishOnly": "npm run build && npm test"
  }
}
```

#### tsconfig.pkg.json (per package)
```jsonc
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "declaration": true,
    "declarationDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src"]
}
```

`pnpm-workspace.yaml`
```yaml
packages:
  - "packages/*"
```

> Each package uses `tsc -p tsconfig.pkg.json` to emit JS and `.d.ts`.

---
## Phase 1 — Core & Bridge MVP (connect + full tree)

### 1.1 Create `@ax/core`
```
packages/core/src/
├─ types.ts        // export type AXNodeFlat, AXNodeTree, Diff
├─ parser.ts       // export function buildTree(list: AXNodeFlat[]): AXNodeTree
└─ index.ts        // re-export
```
Tests: `packages/core/tests/parser.spec.ts`

### 1.2 Create `@ax/bridge`
```
packages/bridge/src/
├─ CdpClient.ts         // class CdpClient { enableDomains(); getFullAXTree(); onNodesUpdated(cb) }
├─ WebSocketServer.ts   // wraps ws, topic-based broadcast
├─ index.ts             // Bridge service bootstrap
└─ mocks/ (for vitest)  // stub CDP responses
```

#### Bridge message types (Browser → UI)
```ts
// packages/bridge/src/types.ts
type SnapshotMsg = { type: 'snapshot'; payload: AXNodeTree };
type UserEvtMsg = { type: 'userEvent'; payload: CDPInputEvent | DomEvent };
type DeltaMsg = { type: 'delta'; payload: JsonDiffPatchDelta };
```

### 1.3 CLI connect
Features:
1. Validate params → ping `http://host:port/json/version`.
2. Dynamically start Bridge.
3. Start UI dev server (`pnpm --filter @ax/ui dev`).

> At this point you can run:
> ```bash
> pnpm cli connect --port 9222
> ```

---
## Phase 2 — UI Minimum Feature

### 2.1 Vite + React scaffolding (see structure doc)

### 2.2 WebSocket hook
`useAxTreeSocket.ts`: keep WS; on `snapshot` set tree.

### 2.3 TreeView (react-arborist)
Tests: testing-library with 10k nodes.

### 2.4 Highlight interaction
Click node → WS `highlight:{backendNodeId}` → Bridge → CDP Overlay.highlight.

---
## Phase 3 — Incremental updates & UX (done)

1. Bridge subscribes `Accessibility.nodesUpdated` → `delta` payload.
2. `core/diff.ts` via jsondiffpatch.
3. UI state updates via patches.
4. Node details, search, etc.

E2E: Playwright navigates github.com and asserts UI text exists.

---
## Phase 4 — Live + Auto-Record unified flow (done)

One command provides Live monitoring and Auto-Recording; stopping instantly switches UI to Timeline playback.

### Plan
| Module | Task | Detail |
|---|---|---|
| **@ax/cli** | `connect` unified | Auto-record by default; `--output` to persist; `--no-record` for live-only. |
| **@ax/bridge** | Recording control | Auto `startRecording(initialTree)`; handle `startRecording`/`stopRecording`; broadcast `recordingStatus` & `recordingStopped`. |
| **@ax/ui** | Live/Timeline switch | Header controls ⏺️/⏹️ + timer; global state `mode`, `recordingStatus`, `currentRecording`; swap to Timeline on stop. |
| **@ax/core** | Types | Recording, TimelineEntry, UserInteractionEvent done. |

### Data structure example (`.axtree-timeline.json`)
```ts
// packages/core/src/types.ts

// Delta shape is defined by jsondiffpatch
type AXNodeTreeDelta = object; 

interface TimelineEntry {
  timestamp: number;
  // Causing event
  event?: { type: string; details: any; };
  // Tree delta
  delta: AXNodeTreeDelta; 
}

interface Recording {
  metadata: { /* ... */ };
  // Initial snapshot
  initialSnapshot: AXNodeTree;
  // Timeline entries
  timeline: TimelineEntry[];
}
```

---
## Phase 5 — E2E & Hardening
1. **E2E:** Test auto-record & timeline playback across simple pages.
2. **Hardening:** Validate patch/unpatch edge-cases; optimize diff performance.
3. **Release:** Publish `@ax/cli` to npm.

---
## Future
- `snapshot`, `diff` as optional follow-ups for CI reporting.
